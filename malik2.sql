Create TABLE SALES(
    SALE_ID INT PRIMARY KEY,
    PRODUCT_ID INT ,
    SALE_DATE DATE,
    QUANTITY INT,
    UNIT_PRICE FLOAT
);

INSERT ALL 
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES
        (1,1,TO_DATE('10-12-2023','DD-MM-YYYY'),10,49)
         INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES
        (2,1,TO_DATE('10-12-2024','DD-MM-YYYY'),10,49)
    SELECT 1 FROM DUAL;
    
SELECT * FROM SALES ORDER BY SALE_ID;

INSERT ALL 
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (11, 1, TO_DATE('10-12-2023','DD-MM-YYYY'), 10, 49)
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (12, 1, TO_DATE('10-12-2024','DD-MM-YYYY'), 15, 55)
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (3, 2, TO_DATE('15-11-2023','DD-MM-YYYY'), 20, 30)
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (4, 2, TO_DATE('20-12-2024','DD-MM-YYYY'), 25, 60)
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (5, 3, TO_DATE('05-01-2023','DD-MM-YYYY'), 5, 90)
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (6, 4, TO_DATE('18-03-2024','DD-MM-YYYY'), 12, 40)
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (7, 5, TO_DATE('22-07-2023','DD-MM-YYYY'), 30, 70)
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (8, 6, TO_DATE('12-09-2023','DD-MM-YYYY'), 18, 20)
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (9, 7, TO_DATE('30-10-2023','DD-MM-YYYY'), 22, 100)
    INTO SALES(SALE_ID, PRODUCT_ID, SALE_DATE, QUANTITY, UNIT_PRICE)
        VALUES (10, 8, TO_DATE('02-11-2024','DD-MM-YYYY'), 40, 150)
SELECT 1 FROM DUAL;

--TASK 01 
SELECT LPAD(PRODUCT_ID,10,0) AS LPADED_PRODUCT_ID FROM SALES;

--TASK 02
SELECT SALE_ID, (QUANTITY*UNIT_PRICE)AS TOTAL_SALE_AMOUNT FROM SALES ORDER BY SALE_ID;

--TASK 03
SELECT SALE_ID, PRODUCT_ID,TRUNC(QUANTITY*UNIT_PRICE,2) AS TOTAL_SALE_AMOUNT FROM SALES ORDER BY SALE_ID;

--TASK 04
SELECT TO_CHAR(sale_date, 'YYYY-MM') AS sale_month, 
       TRUNC(SUM(quantity * unit_price), 2) AS total_monthly_sales 
FROM sales 
GROUP BY TO_CHAR(sale_date, 'YYYY-MM')
ORDER BY sale_month;

--QUESTION 02
CREATE TABLE BookLoans ( 
LoanID INT, 
BookID INT, 
BookTitle VARCHAR(100), 
BorrowerID INT, 
BorrowerName VARCHAR(50), 
LoanDate DATE, 
ReturnDate DATE 
);

INSERT ALL
    INTO BookLoans(loanID, BookID, BookTitle, borrowerID, borrowername, loandate, returndate)
    values (1,101,'The Great Gatsby', 201, 'Alice', TO_DATE('2023-10-01', 'YYYY-MM-DD'), TO_DATE('2023-10-15', 'YYYY-MM-DD'))
    
    INTO BookLoans(loanID, BookID, BookTitle, borrowerID, borrowername, loandate, returndate)
    values (2,102,'To Kill a Mockingbird', 202, 'Bob', TO_DATE('2023-10-02', 'YYYY-MM-DD'), TO_DATE('2023-10-16', 'YYYY-MM-DD'))

SELECT 1 FROM DUAL;    

INSERT ALL
    INTO BookLoans(loanID, BookID, BookTitle, borrowerID, borrowername, loandate, returndate)
    VALUES (3, 103, '1984', 203, 'Charlie', TO_DATE('2023-10-16', 'YYYY-MM-DD'), TO_DATE('2023-10-03', 'YYYY-MM-DD'))
    
    INTO BookLoans(loanID, BookID, BookTitle, borrowerID, borrowername, loandate, returndate)
    VALUES (4, 101, 'The Great Gatsby', 202, 'Bob', TO_DATE('2023-10-17', 'YYYY-MM-DD'), TO_DATE('2023-10-04', 'YYYY-MM-DD'))
    
    INTO BookLoans(loanID, BookID, BookTitle, borrowerID, borrowername, loandate, returndate)
    VALUES (5, 104, 'Pride and Prejudice', 201, 'Alice', TO_DATE('2023-10-18', 'YYYY-MM-DD'), TO_DATE('2023-10-05', 'YYYY-MM-DD'))
    
    INTO BookLoans(loanID, BookID, BookTitle, borrowerID, borrowername, loandate, returndate)
    VALUES (6, 102, 'To Kill a Mockingbird', 203, 'Charlie', TO_DATE('2023-10-06', 'YYYY-MM-DD'), TO_DATE('2023-10-20', 'YYYY-MM-DD'))
    
    INTO BookLoans(loanID, BookID, BookTitle, borrowerID, borrowername, loandate, returndate)
    VALUES (7, 105, 'Moby Dick', 204, 'David', TO_DATE('2023-10-07', 'YYYY-MM-DD'), TO_DATE('2023-10-21', 'YYYY-MM-DD'))
    
    INTO BookLoans(loanID, BookID, BookTitle, borrowerID, borrowername, loandate, returndate)
    VALUES (8, 101, 'The Great Gatsby', 203, 'Charlie', TO_DATE('2023-10-08', 'YYYY-MM-DD'), TO_DATE('2023-10-22', 'YYYY-MM-DD'))

SELECT 1 FROM DUAL;

--TASK 01
SELECT BookTitle, count(*) AS TotalLoans, 
        LPAD(BookID,5, '0')as PaddedBookID from BookLoans 
            GROUP BY booktitle, bookid
            HAVING COUNT(*)>=2
            ORDER BY TotalLoans DESC;
            
---------------------------------------------------------------------------------
---------------------GROUP B-----------------------------------------------------
--QUESTION 02:
CREATE TABLE PRODUCT_SALES ( 
    PRODUCT_ID INT, 
    PRODUCT_NAME VARCHAR(50), 
    CATEGORY VARCHAR(50), 
    SALES_AMOUNT DECIMAL(10, 2) 
); 
INSERT ALL
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (1, 'Washing Machine', 'Electronics', 250)
    
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (2, 'Laptop', 'Electronics', 1200)
    
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (3, 'Smartphone', 'Electronics', 800)
    
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (4, 'Refrigerator', 'Electronics', 500)
    
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (5, 'Jeans', 'Clothing', 50)
    
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (6, 'T-Shirt', 'Clothing', 25)
    
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (7, 'Running Shoes', 'Footwear', 100)
    
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (8, 'Blender', 'Home Appliances', 75)
    
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (9, 'Microwave Oven', 'Home Appliances', 150)
    
    INTO PRODUCT_SALES(PRODUCT_ID, PRODUCT_NAME, CATEGORY, SALES_AMOUNT)
    VALUES (10, 'Leather Jacket', 'Clothing', 200)

SELECT 1 FROM DUAL;

SELECT * FROM PRODUCT_SALES;

SELECT CATEGORY, TRUNC(AVG(SALES_AMOUNT),1) AS AVERAGE_SALES_AMOUNT,
        SUM(SALES_AMOUNT)AS TOTAL_SALES_AMOUNT
            FROM PRODUCT_SALES GROUP BY CATEGORY
              HAVING AVG(SALES_AMOUNT)<100
              ORDER BY TOTAL_SALES_AMOUNT DESC;


--QUESTION 01:
CREATE TABLE EMPLOYEEATTANDANCE(
    ATTANDANCE_ID INT,
    EMPLOYEE_ID INT, 
    EMPLOYEE_NAME VARCHAR(50),
    ATTANDANCE_DATE DATE,
    STATUS VARCHAR(20)--VALUES 'PRESENT , ABSENT , LEAVE'
);

INSERT ALL
    INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (1,101, 'ALICE', TO_DATE('2023-10-01','YYYY-MM-DD'), 'PRESENT')
    
 INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (2,102, 'BOB', TO_DATE('2023-10-01','YYYY-MM-DD'), 'ABSENT')
    
     INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (3,101, 'ALICE', TO_DATE('2023-10-02','YYYY-MM-DD'), 'PRESENT')
    
     INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (4,103, 'CHARLIE', TO_DATE('2023-10-02','YYYY-MM-DD'), 'LEAVE')
    
     INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (5,102, 'BOB', TO_DATE('2023-10-03','YYYY-MM-DD'), 'PRESENT')
    
     INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (6,101, 'ALICE', TO_DATE('2023-10-03','YYYY-MM-DD'), 'ABSENT')
    
     INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (7,103, 'CHARLIE', TO_DATE('2023-10-04','YYYY-MM-DD'), 'PRESENT')
    
     INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (8,102, 'BOB', TO_DATE('2023-10-04','YYYY-MM-DD'), 'PRESENT')
     
     INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (9,101, 'ALICE', TO_DATE('2023-10-05','YYYY-MM-DD'), 'PRESENT')
     
     INTO EMPLOYEEATTANDANCE(ATTANDANCE_ID,EMPLOYEE_ID,EMPLOYEE_NAME,ATTANDANCE_DATE,STATUS)
    VALUES (10,103, 'CHARLIE', TO_DATE('2023-10-05','YYYY-MM-DD'), 'ABSENT')
SELECT 1 FROM DUAL;

--TASK 01
SELECT EMPLOYEE_NAME, 
       COUNT(CASE WHEN STATUS = 'PRESENT' THEN 1 END) AS TotalPresentDays, 
       COUNT(CASE WHEN STATUS = 'ABSENT' THEN 1 END) AS TotalAbsentDays,
       MAX(ATTANDANCE_DATE) AS LAST_ATTANDANCE
FROM EMPLOYEEATTANDANCE
GROUP BY EMPLOYEE_NAME
ORDER BY TotalPresentDays DESC;
    
    